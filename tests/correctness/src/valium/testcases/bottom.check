warning: 'valium' selects 6 phases
[Now checking: valium-prepare]
[Now checking: valium-verify]
[Now checking: valium-addext]
[Now checking: valium-inject]
[Not checkable: valium-coerce]
[[syntax trees at end of             valium-commit]] // newSource1.scala
package <empty> {
  @value final class VS extends Object {
    <paramaccessor> private[this] val x1: Int = _;
    <stable> <accessor> <paramaccessor> def x1(): Int = VS.this.x1;
    def <init>(x1: Int): VS = {
      VS.super.<init>();
      ()
    };
    override <synthetic> def equals(x$1: Any): Boolean = VS.equals$xtension(VS.this.x1(), x$1);
    override <synthetic> def hashCode(): Int = VS.hashCode$xtension(VS.this.x1())
  };
  <synthetic> object VS extends Object {
    def <init>(): VS.type = {
      VS.super.<init>();
      ()
    };
    final <synthetic> def equals$xtension($this$x1: Int, x$1: Any): Boolean = x$1.isInstanceOf[VS]().&&({
      <synthetic> val VS$1$x1: Int = x$1.asInstanceOf[VS]().x1();
      $this$x1.==(VS$1$x1)
    });
    final <synthetic> def hashCode$xtension($this$x1: Int): Int = 2749.+($this$x1.hashCode())
  };
  @value final class VM extends Object {
    <paramaccessor> private[this] val x1: Int = _;
    <stable> <accessor> <paramaccessor> def x1(): Int = VM.this.x1;
    <paramaccessor> private[this] val x2: Int = _;
    <stable> <accessor> <paramaccessor> def x2(): Int = VM.this.x2;
    def <init>(x1: Int, x2: Int): VM = {
      VM.super.<init>();
      ()
    };
    override <synthetic> def equals(x$1: Any): Boolean = {
      <synthetic> val $$8: VM = VM.this;
      <synthetic> val 4$x1: Int = $$8.x1;
      <synthetic> val 4$x2: Int = $$8.x2;
      <synthetic> val this$x1$5: Int = 4$x1;
      <synthetic> val this$x2$6: Int = 4$x2;
      <synthetic> val 7: Any = x$1;
      VM.equals$xtension(this$x1$5, this$x2$6, 7)
    };
    override <synthetic> def hashCode(): Int = {
      <synthetic> val $$12: VM = VM.this;
      <synthetic> val 9$x1: Int = $$12.x1;
      <synthetic> val 9$x2: Int = $$12.x2;
      <synthetic> val this$x1$10: Int = 9$x1;
      <synthetic> val this$x2$11: Int = 9$x2;
      VM.hashCode$xtension(this$x1$10, this$x2$11)
    }
  };
  <synthetic> object VM extends Object {
    def <init>(): VM.type = {
      VM.super.<init>();
      ()
    };
    final <synthetic> def equals$xtension($this$x1: Int, $this$x2: Int, x$1: Any): Boolean = x$1.isInstanceOf[VM]().&&({
      <synthetic> val $$13: VM = x$1.asInstanceOf[VM]();
      <synthetic> val VM$1$x1: Int = $$13.x1;
      <synthetic> val VM$1$x2: Int = $$13.x2;
      $this$x1.==(VM$1$x1).&&($this$x2.==(VM$1$x2))
    });
    final <synthetic> def hashCode$xtension($this$x1: Int, $this$x2: Int): Int = 2743.+($this$x1.hashCode()).+($this$x2.hashCode())
  };
  object Test extends Object {
    def <init>(): Test.type = {
      Test.super.<init>();
      ()
    };
    def foos(): Int = scala.this.Predef.???().asInstanceOf[VS]().x1();
    def bars(): Int = new VS(null.asInstanceOf[Int]()).x1();
    def foom(): VM = scala.this.Predef.???();
    def barm(): VM = null
  }
}

[Now checking: valium-commit]