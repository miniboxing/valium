warning: 'valium' selects 5 phases
[Now checking: valium-prepare]
[Now checking: valium-verify]
[Now checking: valium-addext]
[Now checking: valium-inject]
[[syntax trees at end of             valium-coerce]] // newSource1.scala
package valium.testsuite.coerce2 {
  @value final class Point extends Object {
    <paramaccessor> private[this] val x: Double = _;
    <stable> <accessor> <paramaccessor> def x(): Double = Point.this.x;
    <paramaccessor> private[this] val y: Double = _;
    <stable> <accessor> <paramaccessor> def y(): Double = Point.this.y;
    def <init>(x: Double, y: Double): valium.testsuite.coerce2.Point = {
      Point.super.<init>();
      ()
    };
    override <synthetic> def equals(x$1: Any): Boolean = coerce2.this.Point.equals$xtension(scala.this.box2unbox[valium.testsuite.coerce2.Point](Point.this), x$1);
    override <synthetic> def hashCode(): Int = coerce2.this.Point.hashCode$xtension(scala.this.box2unbox[valium.testsuite.coerce2.Point](Point.this))
  };
  <synthetic> object Point extends Object {
    def <init>(): valium.testsuite.coerce2.Point.type = {
      Point.super.<init>();
      ()
    };
    final <synthetic> def equals$xtension($this: valium.testsuite.coerce2.Point @unboxed, x$1: Any): Boolean = x$1.isInstanceOf[valium.testsuite.coerce2.Point]().&&({
      <synthetic> val Point$1: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point](x$1.asInstanceOf[valium.testsuite.coerce2.Point]());
      scala.this.unbox2box[valium.testsuite.coerce2.Point]($this).x().==(scala.this.unbox2box[valium.testsuite.coerce2.Point](Point$1).x()).&&(scala.this.unbox2box[valium.testsuite.coerce2.Point]($this).y().==(scala.this.unbox2box[valium.testsuite.coerce2.Point](Point$1).y()))
    });
    final <synthetic> def hashCode$xtension($this: valium.testsuite.coerce2.Point @unboxed): Int = 77292912.+(scala.this.unbox2box[valium.testsuite.coerce2.Point]($this).x().hashCode()).+(scala.this.unbox2box[valium.testsuite.coerce2.Point]($this).y().hashCode())
  };
  class Points extends Object {
    <paramaccessor> private[this] val p1: valium.testsuite.coerce2.Point @unboxed = _;
    <stable> <accessor> <paramaccessor> def p1(): valium.testsuite.coerce2.Point = scala.this.unbox2box[valium.testsuite.coerce2.Point](Points.this.p1);
    <paramaccessor> private[this] val p2: valium.testsuite.coerce2.Point @unboxed = _;
    <stable> <accessor> <paramaccessor> def p2(): valium.testsuite.coerce2.Point = scala.this.unbox2box[valium.testsuite.coerce2.Point](Points.this.p2);
    def <init>(p1: valium.testsuite.coerce2.Point @unboxed, p2: valium.testsuite.coerce2.Point @unboxed): valium.testsuite.coerce2.Points = {
      Points.super.<init>();
      ()
    }
  };
  object Test extends Object {
    def <init>(): valium.testsuite.coerce2.Test.type = {
      Test.super.<init>();
      ()
    };
    def foo(p: valium.testsuite.coerce2.Point @unboxed): valium.testsuite.coerce2.Point = scala.this.unbox2box[valium.testsuite.coerce2.Point](p);
    def main(args: Array[String]): Unit = {
      val p1: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point](new valium.testsuite.coerce2.Point(1.0, 2.0));
      val p2: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point](new valium.testsuite.coerce2.Point(2.0, 3.0));
      val p3: valium.testsuite.coerce2.Point @unboxed = p1;
      val p4: valium.testsuite.coerce2.Point @unboxed = p2;
      val ps: valium.testsuite.coerce2.Points = new valium.testsuite.coerce2.Points(p1, p2);
      val boxed: Unit = {
        val p5: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point](if (scala.this.Predef.???())
          scala.this.unbox2box[valium.testsuite.coerce2.Point](p1)
        else
          scala.this.unbox2box[valium.testsuite.coerce2.Point](p2));
        val p6: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point]({
          scala.this.Predef.println("hi");
          scala.this.unbox2box[valium.testsuite.coerce2.Point](p1)
        });
        val p7: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point](Test.this.foo(p1));
        val p8: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point](ps.p1());
        val p9: valium.testsuite.coerce2.Point @unboxed = scala.this.box2unbox[valium.testsuite.coerce2.Point](ps.p2());
        ()
      };
      ()
    }
  }
}

[Not checkable: valium-coerce]