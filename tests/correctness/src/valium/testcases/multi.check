warning: 'valium' selects 6 phases
[Now checking: valium-prepare]
[Now checking: valium-verify]
[Now checking: valium-addext]
[Now checking: valium-inject]
[Not checkable: valium-coerce]
[[syntax trees at end of            valium-convert]] // newSource1.scala
package valium.testcases.multi {
  @value final class Point extends Object {
    <paramaccessor> private[this] val x: Double = _;
    <stable> <accessor> <paramaccessor> def x(): Double = Point.this.x;
    <paramaccessor> private[this] val y: Double = _;
    <stable> <accessor> <paramaccessor> def y(): Double = Point.this.y;
    def <init>(x: Double, y: Double): valium.testcases.multi.Point = {
      Point.super.<init>();
      ()
    };
    override def toString(): String = {
      <synthetic> val $2: valium.testcases.multi.Point = Point.this;
      <synthetic> val $1$x: Double = $2.x;
      <synthetic> val $1$y: Double = $2.y;
      <synthetic> val this$x: Double = $1$x;
      <synthetic> val this$y: Double = $1$y;
      multi.this.Point.toString$xtension(this$x, this$y)
    }
  };
  <synthetic> object Point extends Object {
    def <init>(): valium.testcases.multi.Point.type = {
      Point.super.<init>();
      ()
    };
    final def toString$xtension($this$x: Double, $this$y: Double): String = {
      <synthetic> val p1$x: Double = $this$x;
      <synthetic> val p1$y: Double = $this$y;
      new StringContext(scala.this.Predef.wrapRefArray[String](Array[String]{"Point(", ", ", ")"})).s(scala.this.Predef.genericWrapArray[Any](Array[Any]{$this$x, $this$y}))
    }
  };
  object Test extends Object {
    def <init>(): valium.testcases.multi.Test.type = {
      Test.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      def identity(p1$x: Double, p1$y: Double): valium.testcases.multi.Point = {
        <synthetic> val p2$x: Double = p1$x;
        <synthetic> val p2$y: Double = p1$y;
        def p3(): valium.testcases.multi.Point = new valium.testcases.multi.Point(p2$x, p2$y);
        scala.this.Predef.println(new valium.testcases.multi.Point(p2$x, p2$y));
        scala.this.Predef.println(new valium.testcases.multi.Point(p2$x, p2$y).toString());
        <synthetic> val $3: valium.testcases.multi.Point = {
          <synthetic> val $5: valium.testcases.multi.Point = p3();
          <synthetic> val $4$x: Double = $5.x;
          <synthetic> val $4$y: Double = $5.y;
          <synthetic> val arg$p1$x: Double = $4$x;
          <synthetic> val arg$p1$y: Double = $4$y;
          identity2(arg$p1$x, arg$p1$y)
        };
        <synthetic> val p4$x: Double = $3.x;
        <synthetic> val p4$y: Double = $3.y;
        <synthetic> var p5$x: Double = 3.0;
        <synthetic> var p5$y: Double = 0.3;
        p5$x = p2$x;
        p5$y = p2$y;
        new valium.testcases.multi.Point(p2$x, p2$y)
      };
      def identity2(p1$x: Double, p1$y: Double): valium.testcases.multi.Point = {
        case class C1 extends Object with Product with Serializable {
          <synthetic> <caseaccessor> <paramaccessor> private[this] val p2$x: Double = _;
          <synthetic> <caseaccessor> <paramaccessor> private[this] val p2$y: Double = _;
          <stable> <caseaccessor> <accessor> <paramaccessor> def p2(): valium.testcases.multi.Point = new valium.testcases.multi.Point(C1.this.p2$x, C1.this.p2$y);
          def <init>(p2$x: Double, p2$y: Double): C1 = {
            C1.super.<init>();
            ()
          };
          <synthetic> def copy(p2$x: Double, p2$y: Double): C1 = new C1(p2$x, p2$y);
          <synthetic> def copy$default$1(): valium.testcases.multi.Point = C1.this.p2();
          override <synthetic> def productPrefix(): String = "C1";
          <synthetic> def productArity(): Int = 1;
          <synthetic> def productElement(x$1: Int): Any = {
            case <synthetic> val x1: Int = x$1;
            x1 match {
              case 0 => C1.this.p2()
              case _ => throw new IndexOutOfBoundsException(x$1.toString())
            }
          };
          override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](C1.this);
          <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[C1]();
          override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(C1.this);
          override <synthetic> def toString(): String = ScalaRunTime.this._toString(C1.this);
          override <synthetic> def equals(x$1: Any): Boolean = C1.this.eq(x$1.asInstanceOf[Object]()).||({
  case <synthetic> val x1: Any = x$1;
  case5(){
    if (x1.isInstanceOf[C1]())
      matchEnd4(true)
    else
      case6()
  };
  case6(){
    matchEnd4(false)
  };
  matchEnd4(x: Boolean){
    x
  }
}.&&({
            <synthetic> val C1$1: C1 = x$1.asInstanceOf[C1]();
            C1.this.p2().==(C1$1.p2()).&&(C1$1.canEqual(C1.this))
          }))
        };
        <synthetic> object C1 extends scala.runtime.AbstractFunction1[valium.testcases.multi.Point,C1] with Serializable {
          def <init>(): C1.type = {
            C1.super.<init>();
            ()
          };
          final override <synthetic> def toString(): String = "C1";
          case <synthetic> def apply(p2$x: Double, p2$y: Double): C1 = new C1(p2$x, p2$y);
          @scala.annotation.bridge case <synthetic> def apply(@scala.annotation.bridge v1: valium.testcases.multi.Point): C1 = {
            <synthetic> val $7: valium.testcases.multi.Point = v1;
            <synthetic> val $6$x: Double = $7.x;
            <synthetic> val $6$y: Double = $7.y;
            <synthetic> val arg$p2$x: Double = $6$x;
            <synthetic> val arg$p2$y: Double = $6$y;
            apply(arg$p2$x, arg$p2$y)
          };
          case <synthetic> def unapply(x$0: C1): Option[valium.testcases.multi.Point] = if (x$0.==(null))
            scala.this.None
          else
            new Some[valium.testcases.multi.Point](x$0.p2());
          <synthetic> private def readResolve(): Object = C1()
        };
        @volatile var C1$module: C1.type = _;
        <synthetic> <stable> def C1(): C1.type = {
          C1$module = new C1.type();
          C1$module
        };
        C1().apply(p1$x, p1$y).p2()
      };
      def identity3(p1$x: Double, p1$y: Double): valium.testcases.multi.Point = {
        class C2 extends Object {
          <synthetic> <paramaccessor> private[this] val p2$x: Double = _;
          <synthetic> <paramaccessor> private[this] val p2$y: Double = _;
          def <init>(p2$x: Double, p2$y: Double): C2 = {
            C2.super.<init>();
            ()
          };
          def y(): valium.testcases.multi.Point = new valium.testcases.multi.Point(C2.this.p2$x, C2.this.p2$y)
        };
        new C2(p1$x, p1$y).y()
      };
      scala.this.Predef.println({
        <synthetic> val $8$x: Double = 1.0;
        <synthetic> val $8$y: Double = 1.1;
        <synthetic> val arg$p1$x: Double = $8$x;
        <synthetic> val arg$p1$y: Double = $8$y;
        identity(arg$p1$x, arg$p1$y)
      });
      scala.this.Predef.println({
        <synthetic> val $9$x: Double = 2.0;
        <synthetic> val $9$y: Double = 2.1;
        <synthetic> val arg$p1$x: Double = $9$x;
        <synthetic> val arg$p1$y: Double = $9$y;
        identity(arg$p1$x, arg$p1$y)
      });
      scala.this.Predef.println({
        <synthetic> val $10$x: Double = 3.0;
        <synthetic> val $10$y: Double = 3.1;
        <synthetic> val arg$p1$x: Double = $10$x;
        <synthetic> val arg$p1$y: Double = $10$y;
        identity(arg$p1$x, arg$p1$y)
      })
    }
  }
}

[Now checking: valium-convert]