warning: 'valium' selects 4 phases
[Now checking: valium-verify]
[Now checking: valium-inject]
[Not checkable: valium-coerce]
[[syntax trees at end of            valium-convert]] // newSource1.scala
package valium.testcases.singlepoly {
  @valium final class Point[T] extends Object {
    <paramaccessor> private[this] val x: T = _;
    <stable> <accessor> <paramaccessor> def x(): T = Point.this.x;
    def <init>(x: T): valium.testcases.singlepoly.Point[T] = {
      Point.super.<init>();
      ()
    };
    override def toString(): String = {
      <synthetic> val p1$x: T = this.x();
      new StringContext(scala.this.Predef.wrapRefArray[String](Array[String]{"Point(", ")"})).s(scala.this.Predef.genericWrapArray[Any](Array[Any]{Point.this.x()}))
    };
    override def hashCode(): Int = Point.this.x().hashCode();
    override def equals(other: Any): Boolean = other.isInstanceOf[valium.testcases.singlepoly.Point[T]]().&&(other.asInstanceOf[valium.testcases.singlepoly.Point[T]]().x().==(Point.this.x()))
  };
  object Test extends Object {
    def <init>(): valium.testcases.singlepoly.Test.type = {
      Test.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      def identitymono(p1$x: Double): Double = {
        <synthetic> val p2$x: Double = p1$x;
        def p3(): Double = p2$x;
        scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](p2$x));
        scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](p2$x).toString());
        <synthetic> val p4$x: Double = identity2mono(p3());
        <synthetic> var p5$x: Double = 3.0;
        p5$x = p2$x;
        p2$x
      };
      def identitypoly[T](p1$x: T): T = {
        <synthetic> val p2$x: T = p1$x;
        def p3(): T = p2$x;
        scala.this.Predef.println(new valium.testcases.singlepoly.Point[T](p2$x));
        scala.this.Predef.println(new valium.testcases.singlepoly.Point[T](p2$x).toString());
        <synthetic> val p4$x: T = identity2poly[T](p3());
        <synthetic> var p5$x: T = new valium.testcases.singlepoly.Point[Double](3.0).asInstanceOf[valium.testcases.singlepoly.Point[T]]().x();
        p5$x = p2$x;
        p2$x
      };
      def identity2mono(p1$x: Double): Double = {
        case class C1 extends Object with Product with Serializable {
          <synthetic> <caseaccessor> <paramaccessor> private[this] val p2$x: Double = _;
          <stable> <caseaccessor> <accessor> <paramaccessor> def p2(): Double = C1.this.p2$x;
          def <init>(p2$x: Double): C1 = {
            C1.super.<init>();
            ()
          };
          <synthetic> def copy(p2$x: Double): C1 = new C1(p2$x);
          <synthetic> def copy$default$1(): Double = C1.this.p2();
          override <synthetic> def productPrefix(): String = "C1";
          <synthetic> def productArity(): Int = 1;
          <synthetic> def productElement(x$1: Int): Any = {
            case <synthetic> val x1: Int = x$1;
            x1 match {
              case 0 => new valium.testcases.singlepoly.Point[Double](C1.this.p2())
              case _ => throw new IndexOutOfBoundsException(x$1.toString())
            }
          };
          override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](C1.this);
          <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[C1]();
          override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(C1.this);
          override <synthetic> def toString(): String = ScalaRunTime.this._toString(C1.this);
          override <synthetic> def equals(x$1: Any): Boolean = C1.this.eq(x$1.asInstanceOf[Object]()).||({
  case <synthetic> val x1: Any = x$1;
  case5(){
    if (x1.isInstanceOf[C1]())
      matchEnd4(true)
    else
      case6()
  };
  case6(){
    matchEnd4(false)
  };
  matchEnd4(x: Boolean){
    x
  }
}.&&({
            <synthetic> val C1$1: C1 = x$1.asInstanceOf[C1]();
            new valium.testcases.singlepoly.Point[Double](C1.this.p2()).==(new valium.testcases.singlepoly.Point[Double](C1$1.p2())).&&(C1$1.canEqual(C1.this))
          }))
        };
        <synthetic> object C1 extends scala.runtime.AbstractFunction1[valium.testcases.singlepoly.Point[Double],C1] with Serializable {
          def <init>(): C1.type = {
            C1.super.<init>();
            ()
          };
          final override <synthetic> def toString(): String = "C1";
          case <synthetic> def apply(p2$x: Double): C1 = new C1(p2$x);
          case <synthetic> def unapply(x$0: C1): Option[valium.testcases.singlepoly.Point[Double]] = if (x$0.==(null))
            scala.this.None
          else
            new Some[valium.testcases.singlepoly.Point[Double]](new valium.testcases.singlepoly.Point[Double](x$0.p2()));
          <synthetic> private def readResolve(): Object = C1()
        };
        @volatile var C1$module: C1.type = _;
        <synthetic> <stable> def C1(): C1.type = {
          C1$module = new C1.type();
          C1$module
        };
        C1().apply(p1$x).p2()
      };
      def identity2poly[T](p1$x: T): T = {
        case class C11[T] extends Object with Product with Serializable {
          <synthetic> <caseaccessor> <paramaccessor> private[this] val p2$x: T = _;
          <stable> <caseaccessor> <accessor> <paramaccessor> def p2(): T = C11.this.p2$x;
          def <init>(p2$x: T): C11[T] = {
            C11.super.<init>();
            ()
          };
          <synthetic> def copy[T](p2$x: T): C11[T] = new C11[T](p2$x);
          <synthetic> def copy$default$1[T](): T = C11.this.p2();
          override <synthetic> def productPrefix(): String = "C11";
          <synthetic> def productArity(): Int = 1;
          <synthetic> def productElement(x$1: Int): Any = {
            case <synthetic> val x1: Int = x$1;
            x1 match {
              case 0 => new valium.testcases.singlepoly.Point[T](C11.this.p2())
              case _ => throw new IndexOutOfBoundsException(x$1.toString())
            }
          };
          override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](C11.this);
          <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[C11[_]]();
          override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(C11.this);
          override <synthetic> def toString(): String = ScalaRunTime.this._toString(C11.this);
          override <synthetic> def equals(x$1: Any): Boolean = C11.this.eq(x$1.asInstanceOf[Object]()).||({
  case <synthetic> val x1: Any = x$1;
  case5(){
    if (x1.isInstanceOf[C11[T]]())
      matchEnd4(true)
    else
      case6()
  };
  case6(){
    matchEnd4(false)
  };
  matchEnd4(x: Boolean){
    x
  }
}.&&({
            <synthetic> val C11$1: C11[T] = x$1.asInstanceOf[C11[T]]();
            new valium.testcases.singlepoly.Point[T](C11.this.p2()).==(new valium.testcases.singlepoly.Point[T](C11$1.p2())).&&(C11$1.canEqual(C11.this))
          }))
        };
        <synthetic> object C11 extends Object with Serializable {
          def <init>(): C11.type = {
            C11.super.<init>();
            ()
          };
          final override <synthetic> def toString(): String = "C11";
          case <synthetic> def apply[T](p2$x: T): C11[T] = new C11[T](p2$x);
          case <synthetic> def unapply[T](x$0: C11[T]): Option[valium.testcases.singlepoly.Point[T]] = if (x$0.==(null))
            scala.this.None
          else
            new Some[valium.testcases.singlepoly.Point[T]](new valium.testcases.singlepoly.Point[T](x$0.p2()));
          <synthetic> private def readResolve(): Object = C11()
        };
        @volatile var C11$module: C11.type = _;
        <synthetic> <stable> def C11(): C11.type = {
          C11$module = new C11.type();
          C11$module
        };
        case class C12 extends Object with Product with Serializable {
          <synthetic> <caseaccessor> <paramaccessor> private[this] val p2$x: T = _;
          <stable> <caseaccessor> <accessor> <paramaccessor> def p2(): T = C12.this.p2$x;
          def <init>(p2$x: T): C12 = {
            C12.super.<init>();
            ()
          };
          <synthetic> def copy(p2$x: T): C12 = new C12(p2$x);
          <synthetic> def copy$default$1(): T = C12.this.p2();
          override <synthetic> def productPrefix(): String = "C12";
          <synthetic> def productArity(): Int = 1;
          <synthetic> def productElement(x$1: Int): Any = {
            case <synthetic> val x1: Int = x$1;
            x1 match {
              case 0 => new valium.testcases.singlepoly.Point[T](C12.this.p2())
              case _ => throw new IndexOutOfBoundsException(x$1.toString())
            }
          };
          override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](C12.this);
          <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[C12]();
          override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(C12.this);
          override <synthetic> def toString(): String = ScalaRunTime.this._toString(C12.this);
          override <synthetic> def equals(x$1: Any): Boolean = C12.this.eq(x$1.asInstanceOf[Object]()).||({
  case <synthetic> val x1: Any = x$1;
  case5(){
    if (x1.isInstanceOf[C12]())
      matchEnd4(true)
    else
      case6()
  };
  case6(){
    matchEnd4(false)
  };
  matchEnd4(x: Boolean){
    x
  }
}.&&({
            <synthetic> val C12$1: C12 = x$1.asInstanceOf[C12]();
            new valium.testcases.singlepoly.Point[T](C12.this.p2()).==(new valium.testcases.singlepoly.Point[T](C12$1.p2())).&&(C12$1.canEqual(C12.this))
          }))
        };
        <synthetic> object C12 extends scala.runtime.AbstractFunction1[valium.testcases.singlepoly.Point[T],C12] with Serializable {
          def <init>(): C12.type = {
            C12.super.<init>();
            ()
          };
          final override <synthetic> def toString(): String = "C12";
          case <synthetic> def apply(p2$x: T): C12 = new C12(p2$x);
          case <synthetic> def unapply(x$0: C12): Option[valium.testcases.singlepoly.Point[T]] = if (x$0.==(null))
            scala.this.None
          else
            new Some[valium.testcases.singlepoly.Point[T]](new valium.testcases.singlepoly.Point[T](x$0.p2()));
          <synthetic> private def readResolve(): Object = C12()
        };
        @volatile var C12$module: C12.type = _;
        <synthetic> <stable> def C12(): C12.type = {
          C12$module = new C12.type();
          C12$module
        };
        C11().apply[T](p1$x).p2();
        C12().apply(p1$x).p2()
      };
      def identity3mono(p1$x: Double): Double = {
        class C2 extends Object {
          <synthetic> <paramaccessor> private[this] val p2$x: Double = _;
          def <init>(p2$x: Double): C2 = {
            C2.super.<init>();
            ()
          };
          def y(): Double = C2.this.p2$x
        };
        new C2(p1$x).y()
      };
      def identity3poly[T](p1$x: T): T = {
        class C21[T] extends Object {
          <synthetic> <paramaccessor> private[this] val p2$x: T = _;
          def <init>(p2$x: T): C21[T] = {
            C21.super.<init>();
            ()
          };
          def y(): T = C21.this.p2$x
        };
        class C22 extends Object {
          <synthetic> <paramaccessor> private[this] val p2$x: T = _;
          def <init>(p2$x: T): C22 = {
            C22.super.<init>();
            ()
          };
          def y(): T = C22.this.p2$x
        };
        new C21[T](p1$x).y();
        new C22(p1$x).y()
      };
      scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](identitymono(1.0)));
      scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](identitypoly[Double](1.0)));
      scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](identity2mono(2.0)));
      scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](identity2poly[Double](2.0)));
      scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](identity3mono(3.0)));
      scala.this.Predef.println(new valium.testcases.singlepoly.Point[Double](identity3poly[Double](3.0)))
    }
  }
}

[Now checking: valium-convert]