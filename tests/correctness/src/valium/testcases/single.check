warning: 'valium' selects 5 phases
[Now checking: valium-prepare]
[Now checking: valium-verify]
[Now checking: valium-inject]
[Not checkable: valium-coerce]
[[syntax trees at end of            valium-convert]] // newSource1.scala
package valium.testcases.single {
  @valium final class Point extends Object {
    <paramaccessor> private[this] val x: Double = _;
    <stable> <accessor> <paramaccessor> def x(): Double = Point.this.x;
    def <init>(x: Double): valium.testcases.single.Point = {
      Point.super.<init>();
      ()
    };
    override def toString(): String = {
      <synthetic> val p1$x: Double = this.x();
      new StringContext(scala.this.Predef.wrapRefArray[String](Array[String]{"Point(", ")"})).s(scala.this.Predef.genericWrapArray[Any](Array[Any]{Point.this.x()}))
    }
  };
  object Test extends Object {
    def <init>(): valium.testcases.single.Test.type = {
      Test.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      def identity(p1$x: Double): Double = {
        <synthetic> val p2$x: Double = p1$x;
        def p3(): Double = p2$x;
        scala.this.Predef.println(new valium.testcases.single.Point(p2$x));
        scala.this.Predef.println(new valium.testcases.single.Point(p2$x).toString());
        <synthetic> val p4$x: Double = identity2(p3());
        <synthetic> var p5$x: Double = 3.0;
        p5$x = p2$x;
        p2$x
      };
      def identity2(p1$x: Double): Double = {
        case class C1 extends Object with Product with Serializable {
          <synthetic> <caseaccessor> <paramaccessor> private[this] val p2$x: Double = _;
          <stable> <caseaccessor> <accessor> <paramaccessor> def p2(): Double = C1.this.p2$x;
          def <init>(p2$x: Double): C1 = {
            C1.super.<init>();
            ()
          };
          <synthetic> def copy(p2$x: Double): C1 = new C1(p2$x);
          <synthetic> def copy$default$1(): Double = C1.this.p2();
          override <synthetic> def productPrefix(): String = "C1";
          <synthetic> def productArity(): Int = 1;
          <synthetic> def productElement(x$1: Int): Any = {
            case <synthetic> val x1: Int = x$1;
            x1 match {
              case 0 => new valium.testcases.single.Point(C1.this.p2())
              case _ => throw new IndexOutOfBoundsException(x$1.toString())
            }
          };
          override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](C1.this);
          <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[C1]();
          override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(C1.this);
          override <synthetic> def toString(): String = ScalaRunTime.this._toString(C1.this);
          override <synthetic> def equals(x$1: Any): Boolean = C1.this.eq(x$1.asInstanceOf[Object]()).||({
  case <synthetic> val x1: Any = x$1;
  case5(){
    if (x1.isInstanceOf[C1]())
      matchEnd4(true)
    else
      case6()
  };
  case6(){
    matchEnd4(false)
  };
  matchEnd4(x: Boolean){
    x
  }
}.&&({
            <synthetic> val C1$1: C1 = x$1.asInstanceOf[C1]();
            new valium.testcases.single.Point(C1.this.p2()).==(new valium.testcases.single.Point(C1$1.p2())).&&(C1$1.canEqual(C1.this))
          }))
        };
        <synthetic> object C1 extends scala.runtime.AbstractFunction1[valium.testcases.single.Point,C1] with Serializable {
          def <init>(): C1.type = {
            C1.super.<init>();
            ()
          };
          final override <synthetic> def toString(): String = "C1";
          case <synthetic> def apply(p2$x: Double): C1 = new C1(p2$x);
          @scala.annotation.bridge case <synthetic> def apply(@scala.annotation.bridge v1: valium.testcases.single.Point): C1 = apply(v1.x());
          case <synthetic> def unapply(x$0: C1): Option[valium.testcases.single.Point] = if (x$0.==(null))
            scala.this.None
          else
            new Some[valium.testcases.single.Point](new valium.testcases.single.Point(x$0.p2()));
          <synthetic> private def readResolve(): Object = C1()
        };
        @volatile var C1$module: C1.type = _;
        <synthetic> <stable> def C1(): C1.type = {
          C1$module = new C1.type();
          C1$module
        };
        C1().apply(p1$x).p2()
      };
      def identity3(p1$x: Double): Double = {
        class C2 extends Object {
          <synthetic> <paramaccessor> private[this] val p2$x: Double = _;
          def <init>(p2$x: Double): C2 = {
            C2.super.<init>();
            ()
          };
          def y(): Double = C2.this.p2$x
        };
        new C2(p1$x).y()
      };
      scala.this.Predef.println(new valium.testcases.single.Point(identity(1.0)));
      scala.this.Predef.println(new valium.testcases.single.Point(identity(2.0)));
      scala.this.Predef.println(new valium.testcases.single.Point(identity(3.0)))
    }
  }
}

[Now checking: valium-convert]