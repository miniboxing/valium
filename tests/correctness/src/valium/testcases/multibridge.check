warning: 'valium' selects 6 phases
[Now checking: valium-prepare]
[Now checking: valium-verify]
[Now checking: valium-addext]
[Now checking: valium-inject]
[Not checkable: valium-coerce]
[[syntax trees at end of             valium-commit]] // newSource1.scala
package valium.testcases.multibridge {
  @value final class C extends Object {
    <paramaccessor> private[this] val x1: Int = _;
    <stable> <accessor> <paramaccessor> def x1(): Int = C.this.x1;
    <paramaccessor> private[this] val x2: Int = _;
    <stable> <accessor> <paramaccessor> def x2(): Int = C.this.x2;
    def <init>(x1: Int, x2: Int): valium.testcases.multibridge.C = {
      C.super.<init>();
      ()
    };
    override def toString(): String = {
      <synthetic> val $$4: valium.testcases.multibridge.C = C.this;
      <synthetic> val 1$x1: Int = $$4.x1;
      <synthetic> val 1$x2: Int = $$4.x2;
      <synthetic> val this$x1$2: Int = 1$x1;
      <synthetic> val this$x2$3: Int = 1$x2;
      multibridge.this.C.toString$xtension(this$x1$2, this$x2$3)
    };
    override <synthetic> def equals(x$1: Any): Boolean = {
      <synthetic> val $$9: valium.testcases.multibridge.C = C.this;
      <synthetic> val 5$x1: Int = $$9.x1;
      <synthetic> val 5$x2: Int = $$9.x2;
      <synthetic> val this$x1$6: Int = 5$x1;
      <synthetic> val this$x2$7: Int = 5$x2;
      <synthetic> val 8: Any = x$1;
      multibridge.this.C.equals$xtension(this$x1$6, this$x2$7, 8)
    };
    override <synthetic> def hashCode(): Int = {
      <synthetic> val $$13: valium.testcases.multibridge.C = C.this;
      <synthetic> val 10$x1: Int = $$13.x1;
      <synthetic> val 10$x2: Int = $$13.x2;
      <synthetic> val this$x1$11: Int = 10$x1;
      <synthetic> val this$x2$12: Int = 10$x2;
      multibridge.this.C.hashCode$xtension(this$x1$11, this$x2$12)
    }
  };
  <synthetic> object C extends Object {
    def <init>(): valium.testcases.multibridge.C.type = {
      C.super.<init>();
      ()
    };
    final def toString$xtension($this$x1: Int, $this$x2: Int): String = new StringContext(scala.this.Predef.wrapRefArray[String](Array[String]{"C(", ", ", ")"})).s(scala.this.Predef.genericWrapArray[Any](Array[Any]{$this$x1, $this$x2}));
    final <synthetic> def equals$xtension($this$x1: Int, $this$x2: Int, x$1: Any): Boolean = x$1.isInstanceOf[valium.testcases.multibridge.C]().&&({
      <synthetic> val $$14: valium.testcases.multibridge.C = x$1.asInstanceOf[valium.testcases.multibridge.C]();
      <synthetic> val C$1$x1: Int = $$14.x1;
      <synthetic> val C$1$x2: Int = $$14.x2;
      $this$x1.==(C$1$x1).&&($this$x2.==(C$1$x2))
    });
    final <synthetic> def hashCode$xtension($this$x1: Int, $this$x2: Int): Int = 67.+($this$x1.hashCode()).+($this$x2.hashCode())
  };
  abstract trait Foo[X] extends Object {
    def foo(foox: X, fooy$x1: Int, fooy$x2: Int): X
  };
  abstract trait Bar[Y] extends Object {
    def foo(barx$x1: Int, barx$x2: Int, bary: Y): Y
  };
  abstract trait IntForC extends Object {
    def foo(forcx$x1: Int, forcx$x2: Int, forcy$x1: Int, forcy$x2: Int): valium.testcases.multibridge.C
  };
  class FooForC extends Object with valium.testcases.multibridge.Foo[valium.testcases.multibridge.C] with valium.testcases.multibridge.Bar[valium.testcases.multibridge.C] with valium.testcases.multibridge.IntForC {
    def <init>(): valium.testcases.multibridge.FooForC = {
      FooForC.super.<init>();
      ()
    };
    override def foo(x$x1: Int, x$x2: Int, y$x1: Int, y$x2: Int): valium.testcases.multibridge.C = {
      scala.this.Predef.println(new StringContext(scala.this.Predef.wrapRefArray[String](Array[String]{"", ", ", ""})).s(scala.this.Predef.genericWrapArray[Any](Array[Any]{new valium.testcases.multibridge.C(x$x1, x$x2), new valium.testcases.multibridge.C(y$x1, y$x2)})));
      new valium.testcases.multibridge.C(x$x1, x$x2)
    };
    @scala.annotation.bridge override def foo(barx$x1: Int, barx$x2: Int, @scala.annotation.bridge bary: valium.testcases.multibridge.C): valium.testcases.multibridge.C = {
      <synthetic> val arg$x$x1$15: Int = barx$x1;
      <synthetic> val arg$x$x2$16: Int = barx$x2;
      <synthetic> val $$20: valium.testcases.multibridge.C = bary;
      <synthetic> val 17$x1: Int = $$20.x1;
      <synthetic> val 17$x2: Int = $$20.x2;
      <synthetic> val arg$y$x1$18: Int = 17$x1;
      <synthetic> val arg$y$x2$19: Int = 17$x2;
      foo(arg$x$x1$15, arg$x$x2$16, arg$y$x1$18, arg$y$x2$19)
    };
    @scala.annotation.bridge override def foo(@scala.annotation.bridge foox: valium.testcases.multibridge.C, fooy$x1: Int, fooy$x2: Int): valium.testcases.multibridge.C = {
      <synthetic> val $$26: valium.testcases.multibridge.C = foox;
      <synthetic> val 21$x1: Int = $$26.x1;
      <synthetic> val 21$x2: Int = $$26.x2;
      <synthetic> val arg$x$x1$22: Int = 21$x1;
      <synthetic> val arg$x$x2$23: Int = 21$x2;
      <synthetic> val arg$y$x1$24: Int = fooy$x1;
      <synthetic> val arg$y$x2$25: Int = fooy$x2;
      foo(arg$x$x1$22, arg$x$x2$23, arg$y$x1$24, arg$y$x2$25)
    }
  };
  object Test extends Object {
    def <init>(): valium.testcases.multibridge.Test.type = {
      Test.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      <synthetic> val 27: valium.testcases.multibridge.C = new valium.testcases.multibridge.C(0, 1);
      <synthetic> val 28$x1: Int = 1;
      <synthetic> val 28$x2: Int = 2;
      <synthetic> val arg$fooy$x1$29: Int = 28$x1;
      <synthetic> val arg$fooy$x2$30: Int = 28$x2;
      (new valium.testcases.multibridge.FooForC(): valium.testcases.multibridge.Foo[valium.testcases.multibridge.C]).foo(27, arg$fooy$x1$29, arg$fooy$x2$30);
      <synthetic> val 31$x1: Int = 2;
      <synthetic> val 31$x2: Int = 3;
      <synthetic> val arg|x$x1$32: Int = 31$x1;
      <synthetic> val arg|x$x2$33: Int = 31$x2;
      <synthetic> val 34: valium.testcases.multibridge.C = new valium.testcases.multibridge.C(3, 4);
      (new valium.testcases.multibridge.FooForC(): valium.testcases.multibridge.Bar[valium.testcases.multibridge.C]).foo(arg|x$x1$32, arg|x$x2$33, 34);
      <synthetic> val 35$x1: Int = 4;
      <synthetic> val 35$x2: Int = 5;
      <synthetic> val arg$forcx$x1$36: Int = 35$x1;
      <synthetic> val arg$forcx$x2$37: Int = 35$x2;
      <synthetic> val 38$x1: Int = 5;
      <synthetic> val 38$x2: Int = 6;
      <synthetic> val arg$forcy$x1$39: Int = 38$x1;
      <synthetic> val arg$forcy$x2$40: Int = 38$x2;
      (new valium.testcases.multibridge.FooForC(): valium.testcases.multibridge.IntForC).foo(arg$forcx$x1$36, arg$forcx$x2$37, arg$forcy$x1$39, arg$forcy$x2$40);
      {
        <synthetic> val 41$x1: Int = 6;
        <synthetic> val 41$x2: Int = 7;
        <synthetic> val arg$x$x1$42: Int = 41$x1;
        <synthetic> val arg$x$x2$43: Int = 41$x2;
        <synthetic> val 44$x1: Int = 7;
        <synthetic> val 44$x2: Int = 8;
        <synthetic> val arg$y$x1$45: Int = 44$x1;
        <synthetic> val arg$y$x2$46: Int = 44$x2;
        new valium.testcases.multibridge.FooForC().foo(arg$x$x1$42, arg$x$x2$43, arg$y$x1$45, arg$y$x2$46);
        ()
      }
    }
  }
}

[Now checking: valium-commit]