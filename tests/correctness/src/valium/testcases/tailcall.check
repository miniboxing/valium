[Not checkable: parser]
[Not checkable: namer]
[Not checkable: packageobjects]
[Now checking: typer]
[Now checking: patmat]
[Now checking: superaccessors]
[Now checking: extmethods]
[Now checking: pickler]
[Now checking: refchecks]
[Now checking: uncurry]
[[syntax trees at end of                 tailcalls]] // newSource1.scala
package valium.testcases.tailcalls {
  @value class C extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = C.this.i;
    def <init>(i: Int): valium.testcases.tailcalls.C = {
      C.super.<init>();
      ()
    }
  };
  <synthetic> object C extends Object {
    def <init>(): valium.testcases.tailcalls.C.type = {
      C.super.<init>();
      ()
    }
  };
  @value class D extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = D.this.i;
    <paramaccessor> private[this] val d: Double = _;
    <stable> <accessor> <paramaccessor> def d(): Double = D.this.d;
    def <init>(i: Int, d: Double): valium.testcases.tailcalls.D = {
      D.super.<init>();
      ()
    }
  };
  <synthetic> object D extends Object {
    def <init>(): valium.testcases.tailcalls.D.type = {
      D.super.<init>();
      ()
    }
  };
  object Test extends Object {
    def <init>(): valium.testcases.tailcalls.Test.type = {
      Test.super.<init>();
      ()
    };
    @scala.annotation.tailrec def foo1(c: valium.testcases.tailcalls.C): valium.testcases.tailcalls.C = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo1(_$this: valium.testcases.tailcalls.Test.type, c: valium.testcases.tailcalls.C){
        _foo1(Test.this, c.asInstanceOf[valium.testcases.tailcalls.C]()).asInstanceOf[valium.testcases.tailcalls.C]()
      }
    };
    @scala.annotation.tailrec def foo2(d: valium.testcases.tailcalls.D): valium.testcases.tailcalls.D = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo2(_$this: valium.testcases.tailcalls.Test.type, d: valium.testcases.tailcalls.D){
        _foo2(Test.this, d.asInstanceOf[valium.testcases.tailcalls.D]()).asInstanceOf[valium.testcases.tailcalls.D]()
      }
    }
  }
}

[Now checking: tailcalls]
[Not checkable: specialize]
[[syntax trees at end of            valium-prepare]] // newSource1.scala
package valium.testcases.tailcalls {
  @value class C extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = C.this.i;
    def <init>(i: Int): valium.testcases.tailcalls.C = {
      C.super.<init>();
      ()
    }
  };
  <synthetic> object C extends Object {
    def <init>(): valium.testcases.tailcalls.C.type = {
      C.super.<init>();
      ()
    }
  };
  @value class D extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = D.this.i;
    <paramaccessor> private[this] val d: Double = _;
    <stable> <accessor> <paramaccessor> def d(): Double = D.this.d;
    def <init>(i: Int, d: Double): valium.testcases.tailcalls.D = {
      D.super.<init>();
      ()
    }
  };
  <synthetic> object D extends Object {
    def <init>(): valium.testcases.tailcalls.D.type = {
      D.super.<init>();
      ()
    }
  };
  object Test extends Object {
    def <init>(): valium.testcases.tailcalls.Test.type = {
      Test.super.<init>();
      ()
    };
    @scala.annotation.tailrec def foo1(c: valium.testcases.tailcalls.C): valium.testcases.tailcalls.C = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo1(_$this: valium.testcases.tailcalls.Test.type, c: valium.testcases.tailcalls.C){
        _foo1(Test.this, c)
      }
    };
    @scala.annotation.tailrec def foo2(d: valium.testcases.tailcalls.D): valium.testcases.tailcalls.D = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo2(_$this: valium.testcases.tailcalls.Test.type, d: valium.testcases.tailcalls.D){
        _foo2(Test.this, d)
      }
    }
  }
}

[Now checking: valium-prepare]
[Now checking: valium-verify]
[Now checking: valium-addext]
[Now checking: valium-inject]
[[syntax trees at end of             valium-coerce]] // newSource1.scala
package valium.testcases.tailcalls {
  @value final class C extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = C.this.i;
    def <init>(i: Int): valium.testcases.tailcalls.C = {
      C.super.<init>();
      ()
    };
    override <synthetic> def ==(x$1: Any): Boolean = tailcalls.this.C.==$xtension(scala.this.box2unbox[valium.testcases.tailcalls.C](C.this), x$1);
    override <synthetic> def hashCode(): Int = tailcalls.this.C.hashCode$xtension(scala.this.box2unbox[valium.testcases.tailcalls.C](C.this))
  };
  <synthetic> object C extends Object {
    def <init>(): valium.testcases.tailcalls.C.type = {
      C.super.<init>();
      ()
    };
    final <synthetic> def ==$xtension($this: valium.testcases.tailcalls.C @unboxed, x$1: Any): Boolean = x$1.isInstanceOf[valium.testcases.tailcalls.C]().&&({
      <synthetic> val C$1: valium.testcases.tailcalls.C @unboxed = scala.this.box2unbox[valium.testcases.tailcalls.C](x$1.asInstanceOf[valium.testcases.tailcalls.C]());
      scala.this.unbox2box[valium.testcases.tailcalls.C]($this).i().==(scala.this.unbox2box[valium.testcases.tailcalls.C](C$1).i())
    });
    final <synthetic> def hashCode$xtension($this: valium.testcases.tailcalls.C @unboxed): Int = 67.+(scala.this.unbox2box[valium.testcases.tailcalls.C]($this).i().hashCode())
  };
  @value final class D extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = D.this.i;
    <paramaccessor> private[this] val d: Double = _;
    <stable> <accessor> <paramaccessor> def d(): Double = D.this.d;
    def <init>(i: Int, d: Double): valium.testcases.tailcalls.D = {
      D.super.<init>();
      ()
    };
    override <synthetic> def ==(x$1: Any): Boolean = tailcalls.this.D.==$xtension(scala.this.box2unbox[valium.testcases.tailcalls.D](D.this), x$1);
    override <synthetic> def hashCode(): Int = tailcalls.this.D.hashCode$xtension(scala.this.box2unbox[valium.testcases.tailcalls.D](D.this))
  };
  <synthetic> object D extends Object {
    def <init>(): valium.testcases.tailcalls.D.type = {
      D.super.<init>();
      ()
    };
    final <synthetic> def ==$xtension($this: valium.testcases.tailcalls.D @unboxed, x$1: Any): Boolean = x$1.isInstanceOf[valium.testcases.tailcalls.D]().&&({
      <synthetic> val D$1: valium.testcases.tailcalls.D @unboxed = scala.this.box2unbox[valium.testcases.tailcalls.D](x$1.asInstanceOf[valium.testcases.tailcalls.D]());
      scala.this.unbox2box[valium.testcases.tailcalls.D]($this).i().==(scala.this.unbox2box[valium.testcases.tailcalls.D](D$1).i()).&&(scala.this.unbox2box[valium.testcases.tailcalls.D]($this).d().==(scala.this.unbox2box[valium.testcases.tailcalls.D](D$1).d()))
    });
    final <synthetic> def hashCode$xtension($this: valium.testcases.tailcalls.D @unboxed): Int = 68.+(scala.this.unbox2box[valium.testcases.tailcalls.D]($this).i().hashCode()).+(scala.this.unbox2box[valium.testcases.tailcalls.D]($this).d().hashCode())
  };
  object Test extends Object {
    def <init>(): valium.testcases.tailcalls.Test.type = {
      Test.super.<init>();
      ()
    };
    @scala.annotation.tailrec def foo1(c: valium.testcases.tailcalls.C @unboxed): valium.testcases.tailcalls.C @unboxed = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo1(_$this: valium.testcases.tailcalls.Test.type, c: valium.testcases.tailcalls.C @unboxed){
        _foo1(Test.this, c)
      }
    };
    @scala.annotation.tailrec def foo2(d: valium.testcases.tailcalls.D @unboxed): valium.testcases.tailcalls.D = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo2(_$this: valium.testcases.tailcalls.Test.type, d: valium.testcases.tailcalls.D @unboxed){
        _foo2(Test.this, d)
      }
    }
  }
}

[Not checkable: valium-coerce]
[[syntax trees at end of            valium-convert]] // newSource1.scala
package valium.testcases.tailcalls {
  @value final class C extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = C.this.i;
    def <init>(i: Int): valium.testcases.tailcalls.C = {
      C.super.<init>();
      ()
    };
    override <synthetic> def ==(x$1: Any): Boolean = tailcalls.this.C.==$xtension(C.this.i(), x$1);
    override <synthetic> def hashCode(): Int = tailcalls.this.C.hashCode$xtension(C.this.i())
  };
  <synthetic> object C extends Object {
    def <init>(): valium.testcases.tailcalls.C.type = {
      C.super.<init>();
      ()
    };
    final <synthetic> def ==$xtension($this$i: Int, x$1: Any): Boolean = x$1.isInstanceOf[valium.testcases.tailcalls.C]().&&({
      <synthetic> val C$1$i: Int = x$1.asInstanceOf[valium.testcases.tailcalls.C]().i();
      $this$i.==(C$1$i)
    });
    final <synthetic> def hashCode$xtension($this$i: Int): Int = 67.+($this$i.hashCode())
  };
  @value final class D extends Object {
    <paramaccessor> private[this] val i: Int = _;
    <stable> <accessor> <paramaccessor> def i(): Int = D.this.i;
    <paramaccessor> private[this] val d: Double = _;
    <stable> <accessor> <paramaccessor> def d(): Double = D.this.d;
    def <init>(i: Int, d: Double): valium.testcases.tailcalls.D = {
      D.super.<init>();
      ()
    };
    override <synthetic> def ==(x$1: Any): Boolean = {
      <synthetic> val $2: valium.testcases.tailcalls.D = D.this;
      <synthetic> val $1$i: Int = $2.i;
      <synthetic> val $1$d: Double = $2.d;
      <synthetic> val this$i: Int = $1$i;
      <synthetic> val this$d: Double = $1$d;
      <synthetic> val : Any = x$1;
      tailcalls.this.D.==$xtension(this$i, this$d, )
    };
    override <synthetic> def hashCode(): Int = {
      <synthetic> val $4: valium.testcases.tailcalls.D = D.this;
      <synthetic> val $3$i: Int = $4.i;
      <synthetic> val $3$d: Double = $4.d;
      <synthetic> val this$i: Int = $3$i;
      <synthetic> val this$d: Double = $3$d;
      tailcalls.this.D.hashCode$xtension(this$i, this$d)
    }
  };
  <synthetic> object D extends Object {
    def <init>(): valium.testcases.tailcalls.D.type = {
      D.super.<init>();
      ()
    };
    final <synthetic> def ==$xtension($this$i: Int, $this$d: Double, x$1: Any): Boolean = x$1.isInstanceOf[valium.testcases.tailcalls.D]().&&({
      <synthetic> val $5: valium.testcases.tailcalls.D = x$1.asInstanceOf[valium.testcases.tailcalls.D]();
      <synthetic> val D$1$i: Int = $5.i;
      <synthetic> val D$1$d: Double = $5.d;
      $this$i.==(D$1$i).&&($this$d.==(D$1$d))
    });
    final <synthetic> def hashCode$xtension($this$i: Int, $this$d: Double): Int = 68.+($this$i.hashCode()).+($this$d.hashCode())
  };
  object Test extends Object {
    def <init>(): valium.testcases.tailcalls.Test.type = {
      Test.super.<init>();
      ()
    };
    @scala.annotation.tailrec def foo1(c$i: Int): Int = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo1(x$1: valium.testcases.tailcalls.Test.type, c$i: Int){
        _foo1(Test.this, c$i)
      }
    };
    @scala.annotation.tailrec def foo2(d$i: Int, d$d: Double): valium.testcases.tailcalls.D = {
      <synthetic> val _$this: valium.testcases.tailcalls.Test.type = Test.this;
      _foo2(x$1: valium.testcases.tailcalls.Test.type, d$i: Int, d$d: Double){
        _foo2(Test.this, d$i, d$d)
      }
    }
  }
}

[Now checking: valium-convert]
[Not checkable: explicitouter]
[Now checking: erasure]
[Now checking: posterasure]
[Now checking: lazyvals]
[Now checking: lambdalift]
[Now checking: constructors]
[Now checking: flatten]
[Now checking: mixin]
[Now checking: cleanup]
[Now checking: delambdafy]
[Now checking: icode]
[Now checking: jvm]